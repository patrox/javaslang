/*     / \____  _    ______   _____ / \____   ____  _____
 *    /  \__  \/ \  / \__  \ /  __//  \__  \ /    \/ __  \   Javaslang
 *  _/  // _\  \  \/  / _\  \\_  \/  // _\  \  /\  \__/  /   Copyright 2014-2015 Daniel Dietrich
 * /___/ \_____/\____/\_____/____/\___\_____/_/  \_/____/    Licensed under the Apache License, Version 2.0
 */
package javaslang.collection.euler;

import javaslang.Function1;
import javaslang.Function2;
import javaslang.collection.Stream;
import org.junit.Test;

import java.util.Date;

import static org.assertj.core.api.StrictAssertions.assertThat;

public class Euler12Test {

    /**
     * <strong>Problem 12: Highly divisible triangular number</strong>
     * <p>
     * The sequence of triangle numbers is generated by adding the natural numbers.
     * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
     * <p>
     * The first ten terms would be:
     * <p>
     * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
     * <p>
     * Let us list the factors of the first seven triangle numbers:
     * <p>
     * 1: 1
     * 3: 1,3
     * 6: 1,2,3,6
     * 10: 1,2,5,10
     * 15: 1,3,5,15
     * 21: 1,3,7,21
     * 28: 1,2,4,7,14,28
     * <p>
     * We can see that 28 is the first triangle number to have over five divisors.
     * <p>
     * What is the value of the first triangle number to have over five hundred divisors?
     * <p>
     * See also <a href="https://projecteuler.net/problem=12">projecteuler.net problem 12</a>.
     */
    private final static Stream<Integer> triangleNumbers =
//            Stream.of(0).appendSelf(self -> self.zipWithIndex().map(tuple -> tuple._1 + tuple._2 + 1));
    Stream.from(0).map(n -> n*(n+1)/2);

    private final static Function1<Integer, Integer> divisorCount = limit ->
            Stream.from(1)
                    .takeWhile(n -> n * n <= limit)
                    .foldLeft(0, (acc, div) -> {
                        if (limit % div == 0) {
                            return acc + 2;
                        } else {
                            return acc;
                        }
                    });

    @Test
    public void shouldSolveProblem12() throws Throwable {
        //TODO: check why the corresponding code in Scala completes 10 times faster ...
        System.out.println(new Date());
        assertThat(triangleNumbers.findFirst(t -> divisorCount.apply(t) > 500).get()).isEqualTo(76576500);
        System.out.println(new Date());
    }
}
