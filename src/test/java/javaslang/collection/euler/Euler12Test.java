/*     / \____  _    ______   _____ / \____   ____  _____
 *    /  \__  \/ \  / \__  \ /  __//  \__  \ /    \/ __  \   Javaslang
 *  _/  // _\  \  \/  / _\  \\_  \/  // _\  \  /\  \__/  /   Copyright 2014-2015 Daniel Dietrich
 * /___/ \_____/\____/\_____/____/\___\_____/_/  \_/____/    Licensed under the Apache License, Version 2.0
 */
package javaslang.collection.euler;

import javaslang.collection.Stream;
import org.junit.Test;

import java.util.function.Function;

import static org.assertj.core.api.Assertions.assertThat;

public class Euler12Test {

    /**
     * <strong>Problem 12: Highly divisible triangular number</strong>
     * <p>
     * The sequence of triangle numbers is generated by adding the natural numbers.
     * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
     *
     * The first ten terms would be:

     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

     Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
     10: 1,2,5,10
     15: 1,3,5,15
     21: 1,3,7,21
     28: 1,2,4,7,14,28

     We can see that 28 is the first triangle number to have over five divisors.

     What is the value of the first triangle number to have over five hundred divisors?
     * <p>
     * See also <a href="https://projecteuler.net/problem=12">projecteuler.net problem 12</a>.
     */
    private Long factorCount(Long num) {
        return PrimeNumbers.primeFactors(num)
                .groupBy(Function.<Long>identity())
                .map(longStreamEntry -> longStreamEntry.value.length() + 1)
                .product().longValue();
    }

    private long triangleNumber(long x) {
        return (x*(x+1))/2;
    }

    private final Stream<Long> triangleNumbers = Stream.from(1).map(this::triangleNumber);

    @Test
    public void shouldSolveProblem12() throws Throwable {
        final long start = System.currentTimeMillis();
        assertThat(triangleNumbers.findFirst(triangleNumber -> factorCount(triangleNumber) > 500));
        final long end = System.currentTimeMillis();
        System.out.println("Elapsed: " + (end - start));
    }

}
