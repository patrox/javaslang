/*     / \____  _    ______   _____ / \____   ____  _____
 *    /  \__  \/ \  / \__  \ /  __//  \__  \ /    \/ __  \   Javaslang
 *  _/  // _\  \  \/  / _\  \\_  \/  // _\  \  /\  \__/  /   Copyright 2014-2015 Daniel Dietrich
 * /___/ \_____/\____/\_____/____/\___\_____/_/  \_/____/    Licensed under the Apache License, Version 2.0
 */
package javaslang.collection.euler;

import javaslang.collection.List;
import javaslang.collection.Stream;
import org.junit.Test;

import java.io.File;
import java.math.BigInteger;
import java.net.URL;

import static javaslang.collection.euler.Utils.readLines;
import static org.assertj.core.api.Assertions.assertThat;

public class Euler12Test {

    /**
     * <strong>Problem 12: Highly divisible triangular number</strong>
     * <p>
     * The sequence of triangle numbers is generated by adding the natural numbers.
     * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
     *
     * The first ten terms would be:

     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

     Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
     10: 1,2,5,10
     15: 1,3,5,15
     21: 1,3,7,21
     28: 1,2,4,7,14,28

     We can see that 28 is the first triangle number to have over five divisors.

     What is the value of the first triangle number to have over five hundred divisors?
     * <p>
     * See also <a href="https://projecteuler.net/problem=12">projecteuler.net problem 12</a>.
     */
    @Test
    public void shouldSolveProblem12() {
//        assertThat(
//                triangles()
//                .take(10)
//                .toList())
//        .isEqualTo(List.of(1, 3, 6, 10, 15, 21, 28, 36, 45, 55));
//
//        assertThat(
//                divisors(28)
//                        .toList())
//                .isEqualTo(List.of(1,2,4,7,14,28));
        long start = System.currentTimeMillis();
        final Integer i = solve();
        long end = System.currentTimeMillis();

        System.out.println("i = " + i);
        System.out.println("Elapsed: " + (end - start) / 1000);
    }

    private static Integer solve() {
        return triangles().filter(t -> divisors(t).length() == 500).head();
    }

    // TODO: brute force ... use memoization to remember the previous values
    private static Stream<Integer> triangles() {
        return Stream.from(1).map( i -> Stream.from(1).take(i).sum().intValue());
    }

    private static Stream<Integer> divisors(final int n) {
        return Stream.from(2).take(n/2).filter(d -> n % d == 0).prepend(1).append(n);
    }
}
